name: Build ErudaBrowser APK

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_HOME: ${{ github.workspace }}/.buildozer/android/platform/android-sdk

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Java Development Kit 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install Buildozer and dependencies
      run: |
        # Install system dependencies for Buildozer
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf libtool pkg-config zlib1g-dev libncurses-dev libffi-dev libssl-dev

        # Ensure python-for-android is present
        P4A_DIR="${{ github.workspace }}/.buildozer/android/platform/python-for-android"
        if [ ! -d "$P4A_DIR" ]; then
          echo "python-for-android directory not found. Cloning..."
          mkdir -p "$P4A_DIR"
          git clone --branch master https://github.com/kivy/python-for-android.git "$P4A_DIR"
        else
          echo "python-for-android directory already exists."
        fi

        # Install Python dependencies for Buildozer
        pip install --upgrade pip setuptools wheel
        pip install -r buildozer-requirements.txt

    - name: Build Debug APK with Buildozer
      run: |
        buildozer android clean
        buildozer android debug

    - name: Find Debug APK
      id: find_debug_apk
      run: |
        APK_PATH=$(find bin -name "*.apk" | head -n 1)
        if [ -z "$APK_PATH" ]; then
          echo "Error: Debug APK not found! Listing bin/ contents:"
          ls -l bin/
          exit 1
        fi
        echo "Found debug APK: $APK_PATH"
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT

    - name: Upload Debug APK as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ErudaBrowser-debug-apk
        path: ${{ steps.find_debug_apk.outputs.apk_path }}

    - name: Determine if signing is enabled
      id: signing_check
      run: |
        if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
          echo "signing_enabled=true" >> $GITHUB_OUTPUT
        else
          echo "signing_enabled=false" >> $GITHUB_OUTPUT
        fi

    - name: Build Release APK with Buildozer
      if: steps.signing_check.outputs.signing_enabled == 'true' && github.ref == 'refs/heads/main'
      run: |
        buildozer android release

    - name: Sign and Align Release APK
      if: steps.signing_check.outputs.signing_enabled == 'true' && github.ref == 'refs/heads/main'
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        echo "$KEYSTORE_BASE64" | base64 --decode > android.keystore
        RELEASE_APK_PATH=$(find bin -name "*release-unsigned.apk" | head -n 1)
        if [ -z "$RELEASE_APK_PATH" ]; then
          echo "Error: Release APK not found! Listing bin/ contents:"
          ls -l bin/
          exit 1
        fi
        echo "Signing release APK: $RELEASE_APK_PATH"
        apksigner sign --ks android.keystore \
          --ks-pass env:KEYSTORE_PASSWORD \
          --ks-key-alias "$KEY_ALIAS" \
          --key-pass env:KEY_PASSWORD \
          "$RELEASE_APK_PATH"
        zipalign -p 4 "$RELEASE_APK_PATH" "ErudaBrowser-release.apk"

    - name: Upload Release APK as Artifact
      if: steps.signing_check.outputs.signing_enabled == 'true' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: ErudaBrowser-release-apk
        path: ErudaBrowser-release.apk
