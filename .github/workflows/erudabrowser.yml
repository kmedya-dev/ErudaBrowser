name: Build ErudaBrowser APK

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: kivy/buildozer@sha256:cc8122710460f9045c81382e03f0fad0aa27e007b160987bed4b3c745816b816  # ✅ All deps preinstalled (Python, SDK, NDK, Java)

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Cache Buildozer Global Dir
      uses: actions/cache@v3
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-global-

    - name: Cache Buildozer Local Dir
      uses: actions/cache@v3
      with:
        path: ./.buildozer
        key: ${{ runner.os }}-buildozer-local-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-local-

    - name: Install Python Packages
      run: |
        pip install --upgrade pip setuptools wheel
        pip install buildozer cython toml

    - name: Build Debug APK
      run: |
        buildozer android clean
        buildozer android debug

    - name: Find Debug APK
      id: find_debug_apk
      run: |
        APK_PATH=$(find bin -name "*debug.apk" | head -n 1)
        if [ -z "$APK_PATH" ]; then
          echo "❌ APK not found."
          exit 1
        fi
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT

    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: ErudaBrowser-debug-apk
        path: ${{ steps.find_debug_apk.outputs.apk_path }}

    - name: Check If Signing Secrets Exist
      id: signing
      run: |
        if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
          echo "signing_enabled=true" >> $GITHUB_OUTPUT
        else
          echo "signing_enabled=false" >> $GITHUB_OUTPUT
        fi

    - name: Build Release APK
      if: steps.signing.outputs.signing_enabled == 'true'
      run: |
        buildozer android release

    - name: Sign and Align APK
      if: steps.signing.outputs.signing_enabled == 'true'
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        echo "$KEYSTORE_BASE64" | base64 --decode > release.keystore
        RELEASE_APK=$(find bin -name "*release-unsigned.apk" | head -n 1)
        apksigner sign --ks release.keystore \
          --ks-pass env:KEYSTORE_PASSWORD \
          --ks-key-alias "$KEY_ALIAS" \
          --key-pass env:KEY_PASSWORD \
          "$RELEASE_APK"
        zipalign -p 4 "$RELEASE_APK" ErudaBrowser-release.apk

    - name: Upload Release APK
      if: steps.signing.outputs.signing_enabled == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ErudaBrowser-release-apk
        path: ErudaBrowser-release.apk