name: Build ErudaBrowser APK

on:
  push:
    branches:
      - main
  workflow_dispatch: # Manual trigger
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip openjdk-17-jdk \
          autoconf libtool pkg-config zlib1g-dev \
          libncurses-dev libffi-dev libssl-dev \
          libsqlite3-dev wget curl

    - name: Set up Android SDK
      run: |
        mkdir -p $HOME/android-sdk/cmdline-tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -O commandlinetools-linux.zip
        unzip -q commandlinetools-linux.zip -d $HOME/android-sdk/cmdline-tools/temp
        mv $HOME/android-sdk/cmdline-tools/temp/cmdline-tools $HOME/android-sdk/cmdline-tools/latest

        export PATH=$HOME/android-sdk/cmdline-tools/latest/bin:$PATH

        sdkmanager --sdk_root=$HOME/android-sdk --licenses

        sdkmanager --sdk_root=$HOME/android-sdk 
          "platform-tools" 
          "platforms;android-33" 
          "build-tools;33.0.2" 
          "platforms;android-34"
      env:
        ANDROID_HOME: $HOME/android-sdk
        PATH: $HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools:$PATH

    - name: Install Python & Buildozer
      run: |
        python3 -m pip install --upgrade pip
        pip install buildozer cython toml

    - name: Cache Buildozer Global Dir
      uses: actions/cache@v3
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-global-

    - name: Cache Buildozer Local Dir
      uses: actions/cache@v3
      with:
        path: ./.buildozer
        key: ${{ runner.os }}-buildozer-local-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-local-

    - name: Auto-Update versionCode and versionName
      run: |
        VERSION_CODE=$(date +%Y%m%d%H%M)
        sed -i "s/^version = .*/version = $VERSION_CODE/" buildozer.spec
        sed -i "s/^version.code = .*/version.code = $VERSION_CODE/" buildozer.spec
        echo " Set version to $VERSION_CODE"

    - name: Build Debug APK
      run: |
        buildozer android clean
        buildozer android debug

    - name: Find Debug APK
      id: find_debug_apk
      run: |
        APK_PATH=$(find bin -name "*debug.apk" | head -n 1)
        if [ -z "$APK_PATH" ]; then
          echo "❌ APK not found."
          exit 1
        fi
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
        echo "::notice::Debug APK path: $APK_PATH"

    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: ErudaBrowser-debug-apk
        path: ${{ steps.find_debug_apk.outputs.apk_path }}

    - name: Check If Signing Secrets Exist
      id: signing
      run: |
        if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
          echo "signing_enabled=true" >> $GITHUB_OUTPUT
        else
          echo "signing_enabled=false" >> $GITHUB_OUTPUT
        fi

    - name: Build Release APK
      if: steps.signing.outputs.signing_enabled == 'true'
      run: |
        buildozer android release

    - name: Sign and Align APK
      if: steps.signing.outputs.signing_enabled == 'true'
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        echo "$KEYSTORE_BASE64" | base64 --decode > release.keystore
        RELEASE_APK=$(find bin -name "*release-unsigned.apk" | head -n 1)
        apksigner sign --ks release.keystore \
          --ks-pass env:KEYSTORE_PASSWORD \
          --ks-key-alias "$KEY_ALIAS" \
          --key-pass env:KEY_PASSWORD \
          "$RELEASE_APK"
        zipalign -p 4 "$RELEASE_APK" ErudaBrowser-release.apk
        echo "::notice::Release APK path: ErudaBrowser-release.apk"

    - name: Compare APK Sizes
      if: steps.signing.outputs.signing_enabled == 'true'
      run: |
        DEBUG_APK=$(find bin -name "*debug.apk" | head -n 1)
        RELEASE_APK="ErudaBrowser-release.apk"
        debug_size=$(stat -c%s "$DEBUG_APK")
        release_size=$(stat -c%s "$RELEASE_APK")
        echo " Debug APK: $((debug_size / 1024)) KB"
        echo " Release APK: $((release_size / 1024)) KB"

    - name: Upload Release APK
      if: steps.signing.outputs.signing_enabled == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ErudaBrowser-release-apk
        path: ErudaBrowser-release.apk

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - name: Download Release APK
      uses: actions/download-artifact@v4
      with:
        name: ErudaBrowser-release-apk

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: ErudaBrowser-release.apk

    # - name: Push to Google Play (Internal)
    #   run: |
    #     bundle install
    #     fastlane supply --apk ErudaBrowser-release.apk \
    #       --json_key play-key.json \
    #       --track internal \
    #       --package_name com.kmllc.erudabrowser
