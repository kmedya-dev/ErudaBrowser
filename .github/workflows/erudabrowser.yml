name: Build Android APK

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Java Development Kit
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17' # Buildozer often requires Java 11 or higher

    - name: Set up Android SDK
      run: |
        # Define ANDROID_HOME
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV

        mkdir -p $HOME/android-sdk
        mkdir -p $HOME/.android
        echo "count=0" > $HOME/.android/repositories.cfg

        # Download Android command line tools
        wget https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -O cmdline-tools.zip
        unzip cmdline-tools.zip -d cmdline-tools
        mkdir -p $HOME/android-sdk/cmdline-tools/latest
        mv cmdline-tools/cmdline-tools/* $HOME/android-sdk/cmdline-tools/latest/

        # Add SDK tools to PATH for this step and subsequent steps
        echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
        export PATH="$PATH:$HOME/android-sdk/cmdline-tools/latest/bin"
        export PATH="$PATH:$HOME/android-sdk/platform-tools"

        # Accept licenses and install necessary SDK components
        yes | sdkmanager --licenses
        sdkmanager "platform-tools" "build-tools;33.0.2" "platforms;android-33"

    - name: Install Buildozer and dependencies
      run: |
        pip install buildozer cython
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf libtool pkg-config zlib1g-dev libncurses-dev libffi-dev libssl-dev

    - name: Build Android APK (Debug)
      run: |
        buildozer android debug

    - name: Sign APK (Release - Requires Keystore)
      if: success() && github.ref == 'refs/heads/main' # Only sign on main branch pushes
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        # Decode keystore from base64 secret
        echo "$KEYSTORE_BASE64" | base64 --decode > android.keystore

        # Find the generated debug APK
        APK_PATH=$(find bin -name "*.apk" | head -n 1)
        if [ -z "$APK_PATH" ]; then
          echo "Error: Debug APK not found!"
          exit 1
        fi
        echo "Found debug APK: $APK_PATH"

        # Align the APK (important for Android 9+)
        zipalign -p 4 "$APK_PATH" "app-aligned.apk"

        # Sign the aligned APK
        apksigner sign --ks android.keystore --ks-pass env:KEYSTORE_PASSWORD --ks-key-alias "$KEY_ALIAS" --key-pass env:KEY_PASSWORD app-aligned.apk

        # Rename for consistent artifact naming
        mv app-aligned.apk ErudaBrowser-release.apk

    - name: Upload Debug APK as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ErudaBrowser-debug-apk
        path: bin/*.apk # Adjust if buildozer output path changes

    - name: Upload Release APK as Artifact
      if: success() && github.ref == 'refs/heads/main' # Only upload release APK if signing was attempted
      uses: actions/upload-artifact@v4
      with:
        name: ErudaBrowser-release-apk
        path: ErudaBrowser-release.apk
