name: Build ErudaBrowser APK

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Java Development Kit 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install Buildozer and dependencies
      run: |
        # Install system dependencies for Buildozer
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf libtool pkg-config zlib1g-dev libncurses-dev libffi-dev libssl-dev

        # Install Python dependencies for Buildozer
        pip install --upgrade pip setuptools wheel
        pip install buildozer cython

    - name: Build Debug APK with Buildozer
      run: |
        buildozer android debug

    - name: Find Debug APK
      id: find_debug_apk
      run: |
        APK_PATH=$(find bin -name "*.apk" | head -n 1)
        if [ -z "$APK_PATH" ]; then
          echo "Error: Debug APK not found! Listing bin/ contents:"
          ls -l bin/
          exit 1
        fi
        echo "Found debug APK: $APK_PATH"
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT

    - name: Upload Debug APK as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ErudaBrowser-debug-apk
        path: ${{ steps.find_debug_apk.outputs.apk_path }}

    - name: Sign Release APK (Optional)
      if: success() && github.ref == 'refs/heads/main' && secrets.KEYSTORE_BASE64 != '' # Only sign on main branch if keystore secrets are provided
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        # Decode keystore from base64 secret
        echo "$KEYSTORE_BASE64" | base64 --decode > android.keystore

        # Get the path of the debug APK from the previous step
        DEBUG_APK_PATH="${{ steps.find_debug_apk.outputs.apk_path }}"
        if [ -z "$DEBUG_APK_PATH" ]; then
          echo "Error: Debug APK path not found from previous step!"
          exit 1
        fi
        echo "Signing debug APK: $DEBUG_APK_PATH"

        # Align the APK (important for Android 9+)
        zipalign -p 4 "$DEBUG_APK_PATH" "app-aligned.apk"

        # Sign the aligned APK using apksigner (recommended for Android 7.0+)
        apksigner sign --ks android.keystore --ks-pass env:KEYSTORE_PASSWORD --ks-key-alias "$KEY_ALIAS" --key-pass env:KEY_PASSWORD app-aligned.apk

        # Rename for consistent artifact naming
        mv app-aligned.apk ErudaBrowser-release.apk

    - name: Upload Release APK as Artifact
      if: success() && github.ref == 'refs/heads/main' && secrets.KEYSTORE_BASE64 != '' # Only upload release APK if signing was attempted
      uses: actions/upload-artifact@v4
      with:
        name: ErudaBrowser-release-apk
        path: ErudaBrowser-release.apk
